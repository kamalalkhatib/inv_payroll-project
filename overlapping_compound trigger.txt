/*This compound trigger to prevnet data overlapping*/
CREATE OR REPLACE TRIGGER date_overlp_trg
FOR UPDATE OR INSERT ON work_periods
COMPOUND TRIGGER
   TYPE min_max_period IS RECORD (
      min_date   date
    , max_date   date
   );
       TYPE row_level_info_t IS TABLE OF min_max_period  INDEX BY PLS_INTEGER;
        g_row_level_info   row_level_info_t;
v_mindate date;
v_maxdate date;
v_chk boolean;
      BEFORE STATEMENT IS
   BEGIN
/*lock the required table to prevent data integrity violations*/
select trunc(s_date) into v_mindate from work_periods
where trunc(s_date)=(select trunc(min(s_date)) from work_periods) for update;
select trunc(e_date) into v_maxdate from work_periods
where trunc(e_date)=(select trunc(max(e_date)) from work_periods) for update;
      g_row_level_info (g_row_level_info.COUNT + 1).min_date :=v_mindate;
      g_row_level_info (g_row_level_info.COUNT).max_date := v_maxdate;
END BEFORE STATEMENT;
   AFTER EACH ROW IS
   BEGIN
/*calling check date overlapping function*/
v_chk:=overlapping_check(:new.s_date,:new.e_date);
if v_chk
then
raise_application_error(-20001,'date overlapping not allowed..');
END IF;
exception
when others then
  error_mgr.log_error ('date overlapping compund trigger.');
  raise;
END AFTER EACH ROW;
END date_overlp_trg;
/